/*********************************************/
/*                                           */
/*         Chapter 18: Backup and Recovery   */
/*                                           */
/*********************************************/

/*********************************************/
/*              Introduction                 */
/*********************************************/

-- Backup and recovery are critical components of database administration.
-- Regular backups ensure that you can recover data in the event of hardware failure, software issues, or human error.

/*********************************************/
/*              Creating Backups             */
/*********************************************/

-- MySQL provides the `mysqldump` utility to create logical backups of the database.
-- The `mysqldump` utility generates a SQL script that can be used to recreate the database.

-- Example: Creating a Full Database Backup
-- Replace `username`, `password`, `database_name`, and `backup_file.sql` with actual values.
mysqldump -u username -p password database_name > backup_file.sql

-- Example: Creating a Backup of Specific Tables
mysqldump -u username -p password database_name table1 table2 > backup_file.sql

-- Example: Creating a Compressed Backup
mysqldump -u username -p password database_name | gzip > backup_file.sql.gz

/*********************************************/
/*              Restoring Backups            */
/*********************************************/

-- Restoring a backup involves using the `mysql` command to execute the SQL script generated by `mysqldump`.

-- Example: Restoring a Full Database Backup
-- Replace `username`, `password`, `database_name`, and `backup_file.sql` with actual values.
mysql -u username -p password database_name < backup_file.sql

-- Example: Restoring a Compressed Backup
gunzip < backup_file.sql.gz | mysql -u username -p password database_name

/*********************************************/
/*              Customized Backups           */
/*********************************************/

-- Customized backups can exclude specific tables, columns, or even obfuscate sensitive data to protect it from unauthorized access.

-- Example: Excluding Specific Tables
mysqldump -u username -p password --ignore-table=database_name.table_to_exclude database_name > backup_file.sql;

-- Example: Excluding Specific Columns
-- There is no direct way to exclude columns using `mysqldump`, but you can use a view.
-- Create a view that excludes sensitive columns, then dump the view.

-- Step 1: Create a view without sensitive columns
CREATE VIEW view_employees AS
SELECT employee_id, first_name, last_name, department_id
FROM employees;

-- Step 2: Dump the view
mysqldump -u username -p password database_name view_employees > backup_file.sql;

-- Step 3: Drop the view after the dump
DROP VIEW view_employees;

/*********************************************/
/*              Data Obfuscation             */
/*********************************************/

-- Data obfuscation (or blurring) is the process of masking or transforming sensitive data to protect it during backups.
-- This can be done using SQL functions to replace sensitive data with dummy values.

-- Example: Obfuscating Sensitive Data
-- Step 1: Create a view that obfuscates sensitive data
CREATE VIEW view_employees_obfuscated AS
SELECT 
    employee_id,
    first_name,
    last_name,
    department_id,
    'XXXXXX' AS salary, -- Obfuscate salary
    'YYYYYY' AS email -- Obfuscate email
FROM employees;

-- Step 2: Dump the view
mysqldump -u username -p password database_name view_employees_obfuscated > backup_file.sql;

-- Step 3: Drop the view after the dump
DROP VIEW view_employees_obfuscated;

/*********************************************/
/*              Automating Backups           */
/*********************************************/

-- Automating backups ensures that they are performed regularly without manual intervention.
-- This can be done using cron jobs on Unix/Linux systems or Task Scheduler on Windows.

-- Example: Automating Backups with Cron (Unix/Linux)
-- Step 1: Open the crontab file
crontab -e

-- Step 2: Add a cron job to perform daily backups
0 2 * * * mysqldump -u username -p password database_name > /path/to/backup/backup_file_$(date +\%F).sql

-- Example: Automating Backups with Task Scheduler (Windows)
-- Step 1: Open Task Scheduler
-- Step 2: Create a new task with the following action
-- Action: Start a program
-- Program/script: C:\path\to\mysqldump.exe
-- Add arguments: -u username -p password database_name > C:\path\to\backup\backup_file_%DATE%.sql

/*********************************************/
/*              Best Practices               */
/*********************************************/

-- Best Practices for Backup and Recovery:
-- 1. Regularly test backups to ensure they can be restored successfully.
-- 2. Store backups in a secure, offsite location to protect against physical disasters.
-- 3. Automate backups to ensure they are performed consistently.
-- 4. Use encryption to protect backup files from unauthorized access.
-- 5. Document backup and recovery procedures to ensure they can be performed by others if needed.

/*********************************************/
/*           Example Backup Script           */
/*********************************************/

-- Example: Full Backup Script
-- Replace `username`, `password`, `database_name`, and `/path/to/backup` with actual values.
#!/bin/bash
DATE=$(date +%F)
mysqldump -u username -p password database_name > /path/to/backup/backup_file_$DATE.sql

-- Example: Restore Backup Script
-- Replace `username`, `password`, `database_name`, and `backup_file.sql` with actual values.
#!/bin/bash
mysql -u username -p password database_name < /path/to/backup/backup_file.sql
